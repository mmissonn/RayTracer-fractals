// Eric BOULE
// 27 mars 1992


#include "ri.h"
#include <math.h>
#include <stdlib.h>
#include <stream.h>

#define ligne 8
#define colonne 8


double GaussAdd, GaussFac;
int Nrand, Arand;


RtVoid Fractal(float Ex, float Ey, float Ez)
// Ex, Ey : multiplie dist. en x, y et z
{
int i, j, tmp, max = 32767;
RtPoint carre[4]; // 4 points qui forment un rectangle

// matrice des hauteurs
float X[ligne][colonne];

cout << "\nCalcul de la montagne fractale : [" << ligne << ", " << colonne << "]...\n";


// clacul des hauteurs de la montagne
MidPointFM2D(X, 3, 10000, 0.5, 1, 2);  //maxlevel = 4 => 16 lignes, 16 colonnes

cout << "\nMidPointFM2D termine\n";

for(i = 0; i < ligne; i++)
	for(j = 0; j < colonne; j++)
	{
	tmp = (int) X[i][j];
	if (tmp < 0.01)
		X[i][j] = 0;
	if (tmp > max)
		max = tmp;
	if ((i == 0) | (j == 0))   // limites a zero.
		X[i][j] = 1;
	else X[i][j] = (int) tmp; // pour mettre en entier...
	}

for(i = 0; i < ligne; i++)
	for(j = 0; j < colonne; j++)
	{
	cout << "\n" << i << " , " << j << " = " << (int) X[i][j] << "\n";
	}

for(i = 0; i < ligne; i++)
{
	for(j = 0; j < colonne; j++)
	{
	carre[0].x = carre[3].x = ((j/colonne) * Ex);
	carre[1].x = carre[2].x = (((j+1)/colonne) * Ex);
        
        if( (i==0) || (j==0) || (i== ligne) || (j==colonne) )
          carre[0].y = carre[1].y = carre[2].y = carre[3].y = 0.0;
        else 
        {   
          carre[0].y = ((X[i][j]/max) * Ey);
          carre[1].y = ((X[i][j+1]/max) * Ey);
          carre[2].y = ((X[i+1][j+1]/max) * Ey);
          carre[3].y = ((X[i+1][j]/max) * Ey);
        }                                               

	carre[0].z = carre[1].z = ((i/ligne) * Ez);
	carre[2].z = carre[3].z = (((i+1)/ligne) * Ez);

	//cout << "\ncarre 0 : [" << carre[0].x << ", " << carre[0].y << ", " << carre[0].z << "]";
	//cout << "\ncarre 1 : [" << carre[1].x << ", " << carre[1].y << ", " << carre[1].z << "]";
	//cout << "\ncarre 2 : [" << carre[2].x << ", " << carre[2].y << ", " << carre[2].z << "]";
	//cout << "\ncarre 3 : [" << carre[3].x << ", " << carre[3].y << ", " << carre[3].z << "]";

        RiPolygon(4, RI_P, (RtPointer) carre, RI_NULL);
        
	}
cout << "\nLa ligne no " << i << " est terminee\n";
}

cout << "\nCalcul pour la montagne terminee\n";
}



// p. 77
void InitGauss(int seed)
{
Nrand = 4;
Arand = pow(2, 31) - 1;
GaussAdd = sqrt(3 * Nrand);
GaussFac = 2 * GaussAdd/(Nrand * Arand);
srand(seed);
} // InitGauss


float Gauss()
{
int sum = 0, i;

for(i = 1; i <= Nrand; i++)
	sum = sum + rand();
return(GaussFac * sum - GaussAdd);
} // Gauss



float f3(float delta, float x0, float x1, float x2)
{
return( (x0 + x1 + x2)/3 + delta * Gauss() );
} // f3


float f4(float delta, float x0, float x1, float x2, float x3)
{
return( (x0 + x1 + x2 + x3)/4 + delta * Gauss() );
} // f4




void MidPointFM2D(float X[ligne][colonne], int maxlevel, float sigma, float H, int addition,
	     int seed)
{
int i, N, stage;
float delta;
int x, y, y0, D, d;

InitGauss(seed);

N = pow(2, maxlevel);
delta = sigma;
X[0][0] = delta * Gauss();
X[0][N] = delta * Gauss();
X[N][0] = delta * Gauss();
X[N][N] = delta * Gauss();

D = N;
d = N/2;

for(stage = 1; stage <= maxlevel; stage++)
{


	delta = delta * pow(0.5, 0.5*H);

	for(x = d; x <= (N-d); x = x + D)
		for(y = d; y <= (N-d); y = y + D)
		{
		X[x][y] = f4(delta, X[x+d][y+d], X[x+d][y-d], X[x-d][y+d],
			    X[x-d][y-d]);
		}

	if (addition)
	{
	for(x = 0; x <= N; x = x + D)
		for(y = 0; y <= N; y = y + D)
		{
		X[x][y] = X[x][y] + delta * Gauss();
		}
	}

	delta = delta * pow(0.5, 0.5*H);

	for(x = d; x <= (N-d); x = x + D)
	{
	X[x][0] = f3(delta, X[x+d][0], X[x+d][0], X[x][d]);
	X[x][N] = f3(delta, X[x+d][N], X[x-d][N], X[x][N-d]);
	X[0][x] = f3(delta, X[0][x+d], X[0][x-d], X[d][x]);
	X[N][x] = f3(delta, X[N][x+d], X[N][x-d], X[N-d][x]);
	}


	for(x = d; x <= (N-d); x = x + D)
		for(y = D; y <= (N-d); y = y + D)
		{
		X[x][y] = f4(delta, X[x][y+d], X[x][y-d], X[x+d][y],
			    X[x-d][y]);
		}

	for(x = D; x <= (N-d); x = x + D)
		for(y = d; y <= (N-d); y = y + D)
		{
		X[x][y] = f4(delta, X[x][y+d], X[x][y-d], X[x+d][y],
			    X[x-d][y]);
		}

	if (addition)
	{

	for(x = 0; x <= N; x = x + D)
		for(y = 0; y <= N; y = y + D)
		{
		X[x][y] = X[x][y] + delta * Gauss();
		}

	for(x = d; x <= (N-d); x = x + D)
		for(y = d; y <= (N-d); y = y + D)
		{
		X[x][y] = X[x][y] = delta * Gauss();
		}
	} // IF

	D = D/2;
	d = d/2;

} // for stage

} // MidPointFM2D









