
// exemple d'une Patch p.89 Renderman

#include "ri.h"

void UsageMenu();       // Fonction pour l'affichage de l'usage du programme

#define X0   -1		// points pour la patch
#define X1   -0.33
#define X2  0.33
#define X3   1

#define Y0   -0.7
#define Y1   -0.1
#define Y2   0.1
#define Y3   0.7

#define Z0   -1
#define Z1   -.33
#define Z2   .33
#define Z3   1

main(int argc, char *argv[])
{
RtFloat		Ca, Cd, Cr ,Ct,n ,Cs, size;

RtFloat		intens = 0.5 , intens3 = 0.4;
RtFloat	        intens2 = 0.55;
RtFloat		fov = 50.0 ;

RtPoint		ponct , ponct2, ponct3;

ponct[0] = -5.25 ;
ponct[1] = 5.2 ;
ponct[2] = 5.0 ;

ponct2[0] = 4.0 ;
ponct2[1] = 4.25 ;
ponct2[2] = 4.0 ;

ponct3[0] = -3.0 ;
ponct3[1] = 3.0 ;
ponct3[2] = 4.0 ;

char file[20] ;

mat4 Patch;

Patch.setx(0,0,X0); Patch.sety(0,0,Y0); Patch.setz(0,0,Z0);
Patch.setx(0,1,X1); Patch.sety(0,1,Y2); Patch.setz(0,1,Z0);
Patch.setx(0,2,X2); Patch.sety(0,2,Y1); Patch.setz(0,2,Z0);
Patch.setx(0,3,X3); Patch.sety(0,3,Y3); Patch.setz(0,3,Z0);

Patch.setx(1,0,X0); Patch.sety(1,0,Y1); Patch.setz(1,0,Z2);
Patch.setx(1,1,X1); Patch.sety(1,1,Y2); Patch.setz(1,1,Z1);
Patch.setx(1,2,X2); Patch.sety(1,2,Y1); Patch.setz(1,2,Z1);
Patch.setx(1,3,X3); Patch.sety(1,3,Y2); Patch.setz(1,3,Z1);

Patch.setx(2,0,X0); Patch.sety(2,0,Y1); Patch.setz(2,0,Z2);
Patch.setx(2,1,X1); Patch.sety(2,1,Y2); Patch.setz(2,1,Z2);
Patch.setx(2,2,X2); Patch.sety(2,2,Y1); Patch.setz(2,2,Z2);
Patch.setx(2,3,X3); Patch.sety(2,3,Y2); Patch.setz(2,3,Z2);

Patch.setx(3,0,X0); Patch.sety(3,0,Y0); Patch.setz(3,0,Z3);
Patch.setx(3,1,X1); Patch.sety(3,1,Y2); Patch.setz(3,1,Z3);
Patch.setx(3,2,X2); Patch.sety(3,2,Y1); Patch.setz(3,2,Z3);
Patch.setx(3,3,X3); Patch.sety(3,3,Y3); Patch.setz(3,3,Z3);



int size_x, size_y;      // Taille de l'image de sortie, en pixels.

// --- Verification des arguments ---

    if ( (argc < 2) || (argc == 3) ) 
    {
        UsageMenu();
        exit(0);
    }
    if (argc == 4) 
    {
        size_x=atoi(argv[2]);       // Assignation de la grosseur de l'image
        size_y=atoi(argv[3]);
        if ( (size_x < 1) || (size_y < 1) )
        {
            cout << "\n\nTaille de l'image non valide.\n";
            UsageMenu();
            exit(0);
        }
    }
    else 
    {
        size_x = size_y = 100;      // Taille de defaut.
    }



RiBegin();

 RiWorldBegin();

    MAX_RAY =  3; 
    Flag_Stool = RI_TRUE ;
    RtColor couleur, Sphere;
    RtInt row;
    RtObjectHandle phandle;


// --- definition dimension  de l'image et perspective -----

    RiFormat(size_x, size_y ,1.0);
    if (argc<2)                                 // Aucun parametre
        RiDisplay("image", RI_FILE, RI_RGB, RI_NULL);
    else
        RiDisplay(argv[1], RI_FILE, RI_RGB, RI_NULL);
    RiProjection("perspective", RI_FOV, &fov, RI_NULL);

// --- declaration des lumieres -----

	RiLightSource((RtFunc)ambientlight, "intensity" , &intens, RI_NULL);
	RiLightSource((RtFunc)pointlight  , "intensity", &intens, "from", &ponct3, RI_NULL);	

	RiTranslate(0.0, 0.0, -5.0);

	RiLightSource((RtFunc)pointlight  , "intensity", &intens2, "from", &ponct2,  RI_NULL);


// *************************Sphere****************************


	Sphere[0]  = 0.0 ; Sphere[1]  = 1.0 ; Sphere[2]  = 0.0 ;

        Ca = 0.5; Cd = 0.5; Cr = 1.0; Ct = 0.0; n = 0.5; Cs = 1.0; size = 35.0;
        
        phandle = RiObjectBegin();

           if(!phandle)
              return(0);
           RiSurface((RtFunc)plastic, RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd, RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
	   RiColor(Sphere);
  	      
           RiSphere(3.0, 0, 0, 360.0);
        RiObjectEnd();

// ***********************************************************

	// j'empile 10 spheres les unes sur les autres

        for(row = 0; row < 10 ; row++)
        {
	   RiTransformBegin();         
		RiTranslate(0.0, row, 0.0);
                RiObjectInstance(phandle);
	   RiTransformEnd();
        }



// ************************************************
// plan 


	couleur[0] = 0.0 ; couleur[1] = 0.0 ; couleur[2] = 0.8 ;

	RiTransformBegin();
		Ca = 0.9 ; Cd = 0.5 ; Cr = 0.0 ; Ct = 0.0 ; n = 0.5 ; Cs = 1.5 ; size = 35.0 ;
        	RiSurface((RtFunc)plastic, RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd, RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
		RiColor(couleur);
		PolyPlane(0.0, 4.0, 1.0, 3.0, RI_NULL);

	RiTransformEnd();


// ******************************************************
// plan 

	couleur[0] = 0.0 ; couleur[1] = 1.0 ; couleur[2] = 0.9 ;

	RiTransformBegin();
		Ca = 0.9 ; Cd = 0.5 ; Cr = 0.0 ; Ct = 0.9 ; n = 0.1 ; Cs = 1.0 ; size = 35.0 ;
        	RiSurface((RtFunc)plastic, RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd, RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
		RiColor(couleur);
		PolyPlane(0.0, 0.0, 1.0, 3.0, RI_NULL);

	RiTransformEnd();


// ************************************************
// SPHERE #1 - Refraction


    couleur[0] = 1.0 ; couleur[1] = 1.0 ; couleur[2] = 1.0 ;
    RiTransformBegin();
        Ca = 0.1 ; Cd = 0.2 ; Cr = 0.0 ; Ct = 1.0 ; n = 1.5 ; Cs = 0.5 ;size = 35.0 ;
        RiSurface((RtFunc)plastic , RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd,RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
        RiColor(couleur);
        RiTranslate(-0.6,.3, .9);
        RiSphere(0.7, 0.0, 0.0, 360.0, RI_NULL);
    RiTransformEnd();


// ************************************************
// SPHERE #2 - Petite sphere derriere la premiere

    couleur[0] = 0.8 ; couleur[1] = 0.0 ; couleur[2] = 0.9 ;
    RiTransformBegin();
        Ca = 0.5 ; Cd = 0.5 ; Cr =0.0 ; Ct = 0.0 ; n = 1.0 ; Cs = 1.2 ;size = 35.0 ;
        RiSurface((RtFunc)plastic , RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd,RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
        RiColor(couleur);
        RiTranslate(-2.1, .4, -2.8);
        RiSphere(1.0, 0.0, 0.0, 360.0, RI_NULL);
    RiTransformEnd();


// *************************Patch****************************

	couleur[0] = 1.0 ; couleur[1] = 0.0 ; couleur[2] = 0.0 ;

	RiTransformBegin();
		Ca = 0.8; Cd = 0.5; Cr = 0.0; Ct = 0.0; n = 1.0; Cs = 1.0; size = 35.0;
		RiSurface((RtFunc)plastic, RI_KR, &Cr, RI_KA, &Ca, RI_KD, &Cd, RI_KT, &Ct, RI_N, &n, RI_KS, &Cs, RI_SIZE, &size, RI_NULL);
		RiColor(couleur);
		RiRotate(30.0, 1.0, 1.0, 0.0);
                RiTranslate(2.0, 1, 0);
		//RiScale(1.5, 1.5, 1.5);
		RiPatch(RI_BICUBIC, RI_P, Patch);

	RiTransformEnd();


// ***********************************************************


    // le ray se fait dans world.cc
    RiWorldEnd();
RiEnd();
}



/////////////////////////////////////////////////////////////////////////
// UsageMenu(): Affiche le menu d'utilisation du programme
/////////////////////////////////////////////////////////////////////////
void
UsageMenu()
{
        cout << "\nUsage: rayt image_filename [pixels_x pixels_y]";
        cout << "\navec: image_filename = nom du fichier image a generer";
        cout << "\npixelx_x et pixels_y: Taille en X et Y de l'image (default 100x100)\n";
}



